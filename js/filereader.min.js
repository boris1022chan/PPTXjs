/*!
FileReader.js - v0.99
A lightweight wrapper for common FileReader usage.
Copyright 2014 Brian Grinstead - MIT License.
See http://github.com/bgrins/filereader.js for documentation.
*/
!function (e, t) { var a = e.FileReader, n = !1, r = "self.addEventListener('message', function(e) { var data=e.data; try { var reader = new FileReaderSync; postMessage({ result: reader[data.readAs](data.file), extra: data.extra, file: data.file})} catch(e){ postMessage({ result:'error', extra:data.extra, file:data.file}); } }, false);", o = "onmessage = function(e) { postMessage(!!FileReaderSync); };", s = ["loadstart", "progress", "load", "abort", "error", "loadend"], i = !1, d = e.FileReaderJS = { enabled: !1, setupInput: g, setupBlob: function (e, t) { if (!d.enabled) return; e.constructor !== Array && e.constructor !== Function ? (void 0 === e.name && (e.name = "blob"), e = [e]) : void 0 === e[0].name && (e[0].name = "blob"); var a = m(m({}, d.opts), t); b(null, e, a) }, setupDrop: v, setupClipboard: p, setSync: function (e) { var t; (i = e) && !n && (t = c(o)) && (t.onmessage = function (e) { n = e.data }, t.postMessage({})) }, getSync: function () { return i && n }, output: [], opts: { dragClass: "drag", accept: !1, readAsDefault: "DataURL", readAsMap: {}, on: { loadstart: h, progress: h, load: h, abort: h, error: h, loadend: h, skip: h, groupstart: h, groupend: h, beforestart: h } } }; if ("undefined" != typeof jQuery && (jQuery.fn.fileReaderJS = function (e) { return this.each((function () { jQuery(this).is("input") ? g(this, e) : v(this, e) })) }, jQuery.fn.fileClipboard = function (e) { return this.each((function () { p(this, e) })) }), a) { var u, f = (u = 0, function () { return u++ }), l = function (e) { return function () { return e++ } }(0); d.enabled = !0 } function c(t) { var a = e.URL || e.webkitURL, n = e.Blob, r = e.Worker; if (!(a && n && r && t)) return null; var o = new n([t]); return new r(a.createObjectURL(o)) } function p(e, t) { if (d.enabled) { var a = m(m({}, d.opts), t); e.addEventListener("paste", (function (e) { for (var t = [], n = (e.clipboardData || {}).items || [], r = 0; r < n.length; r++) { var o = n[r].getAsFile(); if (o) { var s = new RegExp("/(.*)").exec(o.type); if (!o.name && s) { var i = s[1]; o.name = "clipboard" + r + "." + i } t.push(o) } } t.length && (b(e, t, a), e.preventDefault(), e.stopPropagation()) }), !1) } } function g(e, t) { if (d.enabled) { var a = m(m({}, d.opts), t); e.addEventListener("change", (function (t) { b(t, e.files, a) }), !1), e.addEventListener("drop", (function (e) { e.stopPropagation(), e.preventDefault(), b(e, e.dataTransfer.files, a) }), !1) } } function v(e, a) { if (d.enabled) { var n = m(m({}, d.opts), a), r = n.dragClass, o = !1; e.addEventListener("dragenter", s((function (t) { t.stopPropagation(), t.preventDefault(), r && y(e, r) })), !1), e.addEventListener("dragleave", s((function (t) { r && D(e, r) })), !1), e.addEventListener("dragover", s((function (t) { t.stopPropagation(), t.preventDefault(), r && y(e, r) })), !1), e.addEventListener("drop", s((function (t) { t.stopPropagation(), t.preventDefault(), r && D(e, r); b(t, t.dataTransfer.files, n) })), !1), t.body.addEventListener("dragstart", (function (e) { o = !0 }), !0), t.body.addEventListener("dragend", (function (e) { o = !1 }), !0), t.body.addEventListener("drop", (function (e) { e.dataTransfer.files && e.dataTransfer.files.length && (e.stopPropagation(), e.preventDefault()) }), !1) } function s(e) { return function () { o || e.apply(this, arguments) } } } function b(e, t, o) { var u, p = t.length, g = { groupID: f(), files: t, started: new Date }; function v() { g.ended = new Date, o.on.groupend(g) } function b() { 0 == --p && v() } (d.output.push(g), function (e, t) { for (var a = 0; a < e.length; a++) { var n = e[a]; n.extra = { nameNoExtension: n.name.substring(0, n.name.lastIndexOf(".")), extension: n.name.substring(n.name.lastIndexOf(".") + 1), fileID: a, uniqueID: l(), groupID: t, prettySize: (r = n.size, o = void 0, o = Math.floor(Math.log(r) / Math.log(1024)), (r / Math.pow(1024, Math.floor(o))).toFixed(2) + " " + ["bytes", "kb", "MB", "GB", "TB", "PB"][o]) } } var r, o }(t, g.groupID), o.on.groupstart(g), t.length) ? (i && n && ((u = c(r)).onmessage = function (e) { var t = e.data.file, a = e.data.result; t.extra || (t.extra = e.data.extra), t.extra.ended = new Date, o.on["error" === a ? "error" : "load"]({ target: { result: a } }, t), b() }), Array.prototype.forEach.call(t, (function (t) { if (t.extra.started = new Date, o.accept && !t.type.match(new RegExp(o.accept))) return o.on.skip(t), void b(); if (!1 === o.on.beforestart(t)) return o.on.skip(t), void b(); var n = function (e, t, a) { for (var n in t) if (e.match(new RegExp(n))) return "readAs" + t[n]; return "readAs" + a }(t.type, o.readAsMap, o.readAsDefault); if (u) u.postMessage({ file: t, extra: t.extra, readAs: n }); else { var r = new a; r.originalEvent = e, s.forEach((function (e) { r["on" + e] = function (a) { "load" != e && "error" != e || (t.extra.ended = new Date), o.on[e](a, t), "loadend" == e && b() } })), r[n](t) } }))) : v() } function h() { } function m(e, t) { for (var a in t) t[a] && t[a].constructor && t[a].constructor === Object ? (e[a] = e[a] || {}, arguments.callee(e[a], t[a])) : e[a] = t[a]; return e } function x(e, t) { return new RegExp("(?:^|\\s+)" + t + "(?:\\s+|$)").test(e.className) } function y(e, t) { x(e, t) || (e.className = e.className ? [e.className, t].join(" ") : t) } function D(e, t) { if (x(e, t)) { var a = e.className; e.className = a.replace(new RegExp("(?:^|\\s+)" + t + "(?:\\s+|$)", "g"), " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "") } } }(this, document);
